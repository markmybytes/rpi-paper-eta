{% from "macros/render_field.jinja" import render_field %}
{% from "schedule/macros/cron_selector.jinja" import cron_selector %}


{% extends "layout.jinja" %}
{% block title %}{{ _('nav_schedule') }}{% endblock title %}


{% block nav %}
{% include "includes/navbar.jinja" %}
{% endblock nav %}


{% block style %}
<style>
    #select-box {
        border-radius: 5px;
        border: var(--bs-border-width) solid var(--bs-border-color);
        padding: 20px;
        height: 400px;
    }

    .hx-indicator {
        display: none;
    }

    .hx-indicator.htmx-request {
        display: block;
    }
</style>
{% endblock style %}


{% block content %}
<div class="row align-items-center" style="height: 100vh;">
    <div class="mx-auto py-4 col-10 col-md-8 col-lg-6">
        {# x-init instead of alpine:init just to avoid incorrect syntax highligt only #}
        <form method="POST" autocomplete="off" x-data="form"
            x-init="
                $data.layout.{{ form.eta_format.data.value or  form.eta_format.data }} = '{{ form.layout.data }}';
                $data.is_partial = {{ 'true' if form.is_partial.data else 'false' }}
            ">
            {{ form.csrf_token }}

            <h1>{{ _('new_schedule') }}</h1>
            <small class="form-text text-mute">
                {{ _('new_schedule_help') | safe }}
            </small>

            <div class="form-group">
                {{ form.schedule.label(class="form-label") }}
                <div class="input-group {{ form_valid_class(form.schedule) }}">
                    {{ form.schedule(class="form-control" + form_valid_class(form.schedule), **{
                    "x-model.fill": "schedule",
                    "@selector-done.window": "schedule = $event.detail"
                    }) }}
                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal"
                        data-bs-target="#cron-configurator">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                </div>

                <div class="invalid-feedback">
                    {% for error in form.schedule.errors %}
                    <span>{{ error }}</span>
                    {% endfor %}
                </div>
                <div class="form-text" :class="cronSuccess ? 'text-success' : 'text-danger'" id="cron-description"
                    x-text="cronDescr">
                </div>
            </div>

            <div class="form-group">
                {{ form.bookmark_group_id.label(class="form-label") }}
                {{ form.bookmark_group_id(class="form-select" + form_valid_class(form.bookmark_group_id)) }}
                <div class="invalid-feedback">
                    {% for error in form.bookmark_group_id.errors %}
                    <span>{{ error }}</span>
                    {% endfor %}
                </div>
            </div>

            <div class="form-group">
                {{ form.eta_format.label(class="form-label") }}
                {{ form.eta_format(class="form-select" + form_valid_class(form.eta_format), **{
                "hx-ext": "path-params",
                "hx-get": url_for("schedule.layouts", eta_format="{eta_format}") | unquote,
                "hx-target": "#select-box",
                "hx-trigger": "load, change",
                }) }}
                <div class="invalid-feedback">
                    {% for error in form.eta_format.errors %}
                    <span>{{ error }}</span>
                    {% endfor %}
                </div>
            </div>

            <div class="form-group">
                {{ form.layout.label(class="form-label") }}
                <div class="overflow-auto" id="select-box"></div>
            </div>
            
            <div class="form-group">
                <div class="form-check form-switch">
                    {{ form.enabled.label(class="form-label") }}
                    {{ form.enabled(class="form-check-input") }}
                </div>
            </div>

            <hr class="my-3">

            <div class="form-group">
                <div class="form-check form-switch">
                    {{ form.is_partial.label(class="form-label") }}
                    {{ form.is_partial(class="form-check-input", **{"x-model": "is_partial"}) }}

                    <div class="form-text">
                        {{ _('partial_refresh_help') }}
                    </div>
                    <div class="form-text text-warning">
                        {{ _('partial_refresh_limit_help') }}
                    </div>
                </div>
            </div>

            <div class="form-group">
                {{ form.partial_cycle.label(class="form-label") }}
                {{ form.partial_cycle(class="form-control" + form_valid_class(form.partial_cycle), **{":disabled": "!is_partial"}) }}

                <div class="form-text">
                    {{ form.partial_cycle.description }}
                </div>
                <div class="invalid-feedback">
                    {% for error in form.partial_cycle.errors %}
                    <span>{{ error }}</span>
                    {% endfor %}
                </div>
            </div>

            <div class="form-group text-end pt-3">
                {{ form.submit(class="btn btn-primary btn-customized") }}
            </div>
        </form>
    </div>
</div>
{% endblock content %}


{% block footer %}
<!-- Modal -->
<div class="modal fade" id="cron-configurator" x-data="cron">
    {# modal-dialog-centered #}
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">{{ _('execute_time') }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" href="#minute" data-bs-toggle="tab">
                            {{ _('minute') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#hour" data-bs-toggle="tab">
                            {{ _('hour') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#date" data-bs-toggle="tab">
                            {{ _('date') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#month" data-bs-toggle="tab">
                            {{ _('month') }}
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#weekday" data-bs-toggle="tab">
                            {{ _('day_of_week') }}
                        </a>
                    </li>
                </ul>

                <div class="tab-content" style="margin-top: 10px;">
                    {{ cron_selector('minute', list(zip(range(60), range(60))), True) }}
                    {{ cron_selector('hour', list(zip(range(24), range(24)))) }}
                    {{ cron_selector('date', list(zip(range(1, 32, 1), range(1, 32, 1)))) }}
                    {{ cron_selector('month', list(zip(range(1, 13, 1), range(1, 13, 1)))) }}
                    {{
                    cron_selector('weekday', list(zip(range(0, 7, 1),
                    [
                    _('monday'),
                    _('tuesday'),
                    _('wednesday'),
                    _('thursday'),
                    _('friday'),
                    _('saturday'),
                    _('sunday')
                    ]))
                    )
                    }}
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ _('cancel') }}</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                    @click="$dispatch('selector-done', from2cron($data))">{{ _('complete') }}</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="preview-md">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">{{ _('layout_preview') }}</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <div id="outter-preview"></div>

                <div class="hx-indicator">
                    <div class="row align-items-center justify-content-center" style="height: 275px;">
                        <div class="loader-ellipsis"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock footer %}


{% block script %}
<script src="https://unpkg.com/cronstrue@latest/dist/cronstrue.min.js"></script>
<script src="https://unpkg.com/cronstrue@latest/locales/zh_TW.min.js"></script>

<script>

    var cronstrue = window.cronstrue;
    const cronKeys = ["minute", "hour", "date", "month", "weekday"];

    document.addEventListener('alpine:init', () => {
        Alpine.data('cron', () =>
            Object.fromEntries(
                cronKeys.map(v => [v, {
                    "mode": "range",
                    "range": {
                        "from": "",
                        "to": "",
                        "every": "",
                    },
                    "choice": [],
                }])
            )
        );

        Alpine.data('form', () => ({
            get cronDescr() {
                try {
                    return cronstrue?.toString(this.schedule, { locale: "zh_TW" });
                } catch {
                    return "{{ _('unrecognised') }}";
                }
            },
            get cronSuccess() {
                return this.cronDescr != "{{ _('unrecognised') }}";
            },
            schedule: '',
            layout: {{ formats }}.reduce((a, v) => ({ ...a, [v]: ""}), {}),
        }));
    });

    function from2cron(data) {
        let cron = [];
        for (key of cronKeys) {
            switch (data[key].mode) {
                case 'range':
                    let range = "";
                    if (data[key].range.from != "*") {
                        range = `${data[key].range.from}-${data[key].range.to}`;
                    } else {
                        range = data[key].range.from;
                    }

                    if (data[key].range.every) {
                        range += `/${data[key].range.every}`;
                    }
                    cron.push(range);
                    break;
                case 'choice':
                    cron.push(data[key].choice.join() || "*");
                    break;
            }
        }
        return cron.join(' ');
    }

</script>
{% endblock script %}